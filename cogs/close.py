import pymongo
import disnake
import asyncio
import datetime
import json
import random
import requests
import re
from disnake.utils import get
from random import randint
from disnake.ext import commands
from disnake import Localized
from disnake.enums import ButtonStyle, TextInputStyle
from PIL import Image, ImageDraw, ImageFont
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

eventname = {}

cluster = pymongo.MongoClient(f"put ur mongo-db link")
database = cluster.sweetness.close

async def update_team_info(self, inter):
    custom_id = inter.component.custom_id
    msg_id = database.find_one({'_id': int(inter.author.id)})['msg']
    msg_id_data = database.find_one({'_id': int(msg_id)})
    host = disnake.utils.get(inter.guild.members, id=int(msg_id_data['author']))
    game = database.find_one({'_id': str(host.id)}, {'game': 1})['game']
    mode = database.find_one({'_id': str(host.id)}, {'mode': 1})['mode']
    prize = database.find_one({'_id': str(host.id)}, {'prize': 1})['prize']

    embed = disnake.Embed(color=disnake.Color(hex_to_rgb("#5a66ea")))
    embed.set_author(name=f"–ó–∞–ø–∏—Å—å –Ω–∞ –∫–ª–æ–∑ {game}", icon_url=inter.guild.icon.url)
    embed.set_thumbnail(url=inter.author.display_avatar.url)
    if inter.author.id in msg_id_data['blacklist']:
        embed.description = f"{inter.author.mention}, **–í—ã** –±—ã–ª–∏ **–∏—Å–∫–ª—é—á–µ–Ω—ã** –≤–µ–¥—É—â–∏–º –∏ —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ **–ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ** –≤ —ç—Ç–æ–º –∫–ª–æ–∑–µ."
        return await inter.send(ephemeral=True, embed=embed)

    database_stats = getattr(database, game)

    if database_stats.count_documents({"_id": str(inter.author.id)}) == 0:
        database_stats.insert_one({"_id": str(inter.author.id), "wins": 0, "loses": 0})
    if game == "Dota2":
        roles_and_fields = [
            ('carry', '<:1pos:1153676338310418432> –ö–µ—Ä—Ä–∏'),
            ('mid', '<:2pos:1153676341607137411> –ú–∏–¥–µ—Ä'),
            ('hard', '<:3pos:1153676343473610762> –°–ª–æ–∂–Ω–∞—è'),
            ('hard_support', '<:4pos:1153676346254430208> –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
            ('full_support', '<:5pos:1153676347927965768> –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
        ]
        for role, role_name in roles_and_fields:
            if custom_id == f'tree_team_{role}':
                if len(msg_id_data[role]) == 2:
                    embed.description = f"{inter.author.mention}, **–°–≤–æ–±–æ–¥–Ω—ã—Ö** —Å–ª–æ—Ç–æ–≤ –¥–ª—è {role_name.lower()} **–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å**"
                    await inter.send(ephemeral=True, embed=embed)
                else:
                    await update_team_and_roles(self, inter, role, role_name, msg_id_data, msg_id, database_stats)

    else:
        team_roles = {
            'tree_team_one': 'team_one',
            'tree_team_two': 'team_two',
        }
        role_to_add = cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})[f'team1_id' if custom_id == 'tree_team_one' else 'team2_id']
        role_to_remove = cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})[f'team2_id' if custom_id == 'tree_team_one' else 'team1_id']
        if custom_id in team_roles:
            team_role = team_roles[custom_id]
            if len(msg_id_data[team_role]) == int(mode[-1]):
                embed.description = f"{inter.author.mention}, –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ {team_role[-3]} –Ω–µ—Ç—É"
                await inter.send(ephemeral=True, embed=embed)
            else:
                await update_team_and_roles(self, inter, team_role, f'–ö–æ–º–∞–Ω–¥–∞ {team_role[-3]}', msg_id_data, msg_id, database_stats, role_to_add, role_to_remove)

    embed.description = f"{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ **–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å**, —Ç–µ–ø–µ—Ä—å **–ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –≤ –ª–æ–±–±–∏** –∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞!"
    await inter.send(ephemeral=True, embed=embed)

    await update_team_embed(self, embed, inter, msg_id_data, database_stats, mode, prize)

async def update_team_and_roles(self, inter, team_role, team_name, msg_id_data, msg_id, database_stats, role_to_add=None, role_to_remove=None):
    author_id = int(inter.author.id)

    msg_id = database.find_one({'_id': int(inter.author.id)})['msg']
    msg_id_data = database.find_one({'_id': int(msg_id)})
    host = disnake.utils.get(inter.guild.members, id=int(msg_id_data['author']))
    game = database.find_one({'_id': str(host.id)}, {'game': 1})['game']
    if game == "Dota2":
        team_roles = ['carry', 'mid', 'hard', 'hard_support', 'full_support']
        for role in team_roles:
            team_list = msg_id_data[role]
            if author_id in team_list:
                database.update_one({'_id': int(msg_id)}, {'$pull': {role: author_id}}, upsert=True)
    else:
        team_roles = ['team_one', 'team_two']
        for role in team_roles:
            team_list = msg_id_data[role]
            if author_id in team_list:
                database.update_one({'_id': int(msg_id)}, {'$pull': {role: author_id}}, upsert=True)

    if game == "Dota2":
        role_name = team_role
        database.update_one({'_id': int(msg_id)}, {'$push': {role_name: author_id}}, upsert=True)
    else:
        await inter.author.add_roles(disnake.utils.get(inter.guild.roles, id=role_to_add))
        await inter.author.remove_roles(disnake.utils.get(inter.guild.roles, id=role_to_remove))

        role_name = team_role
        database.update_one({'_id': int(msg_id)}, {'$push': {role_name: author_id}}, upsert=True)

async def update_team_embed(self, embed, inter, msg_id_data, database_stats, mode, prize):
    msg_id = database.find_one({'_id': int(inter.author.id)})['msg']
    msg_id_data = database.find_one({'_id': int(msg_id)})
    host = disnake.utils.get(inter.guild.members, id=int(msg_id_data['author']))
    game = database.find_one({'_id': str(host.id)}, {'game': 1})['game']

    embed.color = 3092790
    embed.set_author(name=f"CLOSE: {game} | {inter.guild.name}", icon_url=inter.guild.icon.url)
    embed.set_image(url = "")

    need = int(mode[-1]) * 2
    if game == "Dota2":
        roles_and_fields = [
            ('carry', '<:1pos:1153676338310418432> –ö–µ—Ä—Ä–∏'),
            ('mid', '<:2pos:1153676341607137411> –ú–∏–¥–µ—Ä'),
            ('hard', '<:3pos:1153676343473610762> –°–ª–æ–∂–Ω–∞—è'),
            ('hard_support', '<:4pos:1153676346254430208> –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
            ('full_support', '<:5pos:1153676347927965768> –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
        ]


        carry = msg_id_data['carry']
        mid = msg_id_data['mid']
        hard = msg_id_data['hard']
        hard_support = msg_id_data['hard_support']
        full_support = msg_id_data['full_support']

        all_players = len(carry) + len(mid) + len(hard) + len(hard_support) + len(full_support)

        for role, emoji in roles_and_fields:
            players_in_role = msg_id_data[role]
            empty_slots = 2 - len(players_in_role)
            role_mentions = ", ".join([f"<@{player_id}>" for player_id in players_in_role])
            
            if empty_slots > 0:
                for _ in range(empty_slots):
                    role_mentions += "\n–ü—É—Å—Ç–æ"

            embed.add_field(name=emoji, value=role_mentions, inline=False)

            for player_id in players_in_role:
                try:
                    wins, loses, total_games, winrate, name, mmr, steam_info = await get_player_stats(self, player_id, database_stats, game)
                    player_info = f"> <:winrate:1110588767124869130> –í–∏–Ω—Ä–µ–π—Ç: **{winrate}%**\n> <:battle:1110588765128380486> –í—Å–µ–≥–æ –∏–≥—Ä: **{total_games}**\n"
                    if steam_info:
                        player_info += f"> > –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: **{name}**\n> MMR: **{mmr}**\n"
                    player_name = disnake.utils.get(inter.guild.members, id = int(player_id))
                except:
                    player_info += f"> * Steam: **–ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–æ**"
                embed.add_field(name=f'> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {player_name.name}:', value=player_info, inline=False)

                embed.description=f'<:ver:1110588762121048084> **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ**: {all_players}/{need}\n<:giftbox:1110588981025972385> **–ù–∞–≥—Ä–∞–¥–∞**: {prize} üí∞\n<:online:1109846973378470050> –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë **{need - all_players}** –∏–≥—Ä–æ–∫–æ–≤!'
                await inter.message.edit(embed=embed)

    else:  # For other games
        team_one = msg_id_data['team_one']
        team_two = msg_id_data['team_two']

        all_players = len(team_one) + len(team_two)
        value1 = ""
        value2 = ""

        idd = 0
        idd1 = 0

        empty_slots = 5 - len(team_one)
        for _ in range(empty_slots):
            value1 += f"{idd + 1}. –ü—É—Å—Ç–æ\n"
            idd += 1

        empty_slots1 = 5 - len(team_two)
        for _ in range(empty_slots1):
            value2 += f"{idd1 + 1}. –ü—É—Å—Ç–æ\n"
            idd1 += 1

        for team_member_id in team_one:
            wins, loses, total_games, winrate, name, mmr, steam_info = await get_player_stats(self, team_member_id, database_stats, game)
            value1 += f"{idd + 1}. <@{team_member_id}>\n> <:winrate:1110588767124869130> –í–∏–Ω—Ä–µ–π—Ç: **{winrate}%**\n> <:battle:1110588765128380486> –í—Å–µ–≥–æ –∏–≥—Ä: **{total_games}**\n"
            idd += 1

        for team_member_id in team_two:
            wins, loses, total_games, winrate, name, mmr, steam_info = await get_player_stats(self, team_member_id, database_stats, game)
            value2 += f"{idd1 + 1}. <@{team_member_id}>\n> <:winrate:1110588767124869130> –í–∏–Ω—Ä–µ–π—Ç: **{winrate}%**\n> <:battle:1110588765128380486> –í—Å–µ–≥–æ –∏–≥—Ä: **{total_games}**\n"
            idd1 += 1

        embed.add_field(name=f'–ö–æ–º–∞–Ω–¥–∞ 1', value=value1, inline=False)
        embed.add_field(name=f'–ö–æ–º–∞–Ω–¥–∞ 2', value=value2, inline=False)
        message_take = await inter.channel.fetch_message(int(msg_id))
        embed.description=f'<:ver:1110588762121048084> **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ**: {all_players}/{need}\n<:giftbox:1110588981025972385> **–ù–∞–≥—Ä–∞–¥–∞**: {prize} üí∞\n<:online:1109846973378470050> –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë **{need - all_players}** –∏–≥—Ä–æ–∫–æ–≤!'
        await message_take.edit(embed=embed)

async def get_player_stats(self, team_member_id, database_stats, game):
    stats = database_stats.find_one({'_id': str(team_member_id)}, {'wins': 1, 'loses': 1})
    wins = stats['wins']
    loses = stats['loses']
    total_games = wins + loses
    winrate = (wins / total_games) * 100 if total_games != 0 else 0
    winrate = f"{winrate:.2f}".rstrip("0").rstrip(".")
    try:
        steam_info = cluster.sweetness.steam.find_one({'_id': str(team_member_id)})
        name = steam_info['name']
        mmr = steam_info['mmr']
        return wins, loses, total_games, winrate, name, mmr, True
    except:
        return wins, loses, total_games, winrate, None, None, False

class ReportMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.green, emoji = '<:11:1096126530247204966>', custom_id = 'move_one_report', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.green, emoji = '<:zxc3:1009168371213926452>', custom_id = 'accept_one', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.green, emoji = '<:zxc2:1009168373936050206>', custom_id = 'accept_two', row = 0))

class BallReportDisabled(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.secondary, label = '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤', custom_id = 'ball_report', row = 0, disabled=True))

class BallReport(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.secondary, label = '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', custom_id = 'ball_report', row = 0))

class ReportView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.green, label = '–ü—Ä–∏–Ω—è—Ç—å', custom_id = 'accept_report', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.red, label = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', custom_id = 'decline_report', row = 0))

class InviteLink(disnake.ui.View):
    def __init__(self, invite_url):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", custom_id = "list_activity", emoji = "<:events:1142849807698886676>"))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–ó–∞–ø–∏—Å—å", emoji = "<:game:1142847886044971018>", url = invite_url))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", custom_id = "report_activity", emoji = "<:report:1142856573992042496>"))

class EditClose(disnake.ui.View):
    def __init__(self, manage):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", url = manage))

class ChoiceTeam(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–ü–µ—Ä–≤—É—é", custom_id = 'tree_team_one'))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–í—Ç–æ—Ä—É—é", custom_id = 'tree_team_two'))

class WinClose(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–ü–µ—Ä–≤–∞—è", custom_id = 'win_team_one'))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–í—Ç–æ—Ä–∞—è", custom_id = 'win_team_two'))

class YesOrno(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–ü—Ä–∏–Ω—è—Ç—å", custom_id = 'accept_balance', emoji = '<:yes1:1092007373733900348>'))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, label = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", custom_id = 'decline_balance', emoji = '<:close:1092013516392767528>'))

class ChatClose(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", custom_id = 'open_chat', emoji = '‚ñ∂Ô∏è', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", custom_id = 'close_chat', emoji = '‚ùå', row = 0))

class VoiceClose(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–û—Ç–∫—Ä—ã—Ç—å –≤–æ–π—Å", custom_id = 'open_voice', emoji = '‚ñ∂Ô∏è', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ó–∞–∫—Ä—ã—Ç—å –≤–æ–π—Å", custom_id = 'close_voice', emoji = '‚ùå', row = 0))

class Notifications(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'notifications_on', emoji = 'üîî', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'notifications_off', emoji = 'üîï', row = 0))

class ManageClose(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'start_close', emoji = '‚ñ∂Ô∏è', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'member_close', emoji = '‚ùå', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'anonce_close', emoji = 'üìå', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'win_close', emoji = "<:top1:1139161095265853460>", row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'mute_close', emoji = ':mute:942394507616485396>', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'unmute_close', emoji = '<:unmute:942394404168142919>', row = 1))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, custom_id = 'cancel_close', emoji = 'üóëÔ∏è', row = 1))

class CloseReg(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", custom_id = 'reg', emoji = '<:ver:1110588762121048084>', row = 0))

class CloseDota(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, custom_id = 'tree_team_carry', emoji = "<:1pos:1153676338310418432>", row = 0))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, custom_id = 'tree_team_mid', emoji = "<:2pos:1153676341607137411>", row = 0))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, custom_id = 'tree_team_hard', emoji = "<:3pos:1153676343473610762>", row = 0))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, custom_id = 'tree_team_hard_support', emoji = "<:4pos:1153676346254430208>", row = 0))
        self.add_item(disnake.ui.Button(style = disnake.ButtonStyle.secondary, custom_id = 'tree_team_full_support', emoji = "<:5pos:1153676347927965768>", row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–∏–º", custom_id = 'registerSteam', emoji = '<:steam:1153714447899173015>', row = 1))


class RegDisabled(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", custom_id = 'reg', emoji = '<:ver:1110588762121048084>', row = 0, disabled = True))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–∏–º", custom_id = 'registerSteam', emoji = '<:steam:1153714447899173015>', row = 1, disabled = True))

class EventBack(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–ú–µ–Ω—é", custom_id = 'back_close', emoji = '<:menu:1092007362354757672>', row = 0))
        self.add_item(disnake.ui.Button(style = ButtonStyle.gray, label = "–í—ã—Ö–æ–¥", custom_id = 'close_back', emoji = '<:close:1092013516392767528>', row = 0))

class CloseManageDropdown1(disnake.ui.Select):
    def __init__(self):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É",
            options = [
                disnake.SelectOption(label="Rust", value = 'choice_close_Rust', description="Rust"),
                disnake.SelectOption(label="CS:GO", value = 'choice_close_CSGO', description = "CS:GO"),
                disnake.SelectOption(label="CS:GO Pub", value = 'choice_close_CSGOPub', description = "CS:GO Pub"),
                disnake.SelectOption(label="Dota 2", value = 'choice_close_Dota2', description = "Dota 2"),
                disnake.SelectOption(label="Dota Pub", value = 'choice_close_DotaPub', description = "Dota Pub"),
                disnake.SelectOption(label="Valorant", value = 'choice_close_Valorant', description = "Valorant"),
                disnake.SelectOption(label="Roblox", value = 'choice_close_Roblox', description = "Roblox"),
                disnake.SelectOption(label="Apex", value = 'choice_close_Apex', description = "Apex"),
                disnake.SelectOption(label="Rainbow Six", value = 'choice_close_RainbowSix', description = "Rainbow six"),
                disnake.SelectOption(label="BrawlHalla", value = 'choice_close_BrawlHalla', description = "BrawlHalla"),
                disnake.SelectOption(label="Mobile Legends", value = 'choice_close_MobileLegends', description = "MobileLegends"),
            ],
        )

class CloseManageDropdown2(disnake.ui.Select):
    def __init__(self):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
            options = [
                disnake.SelectOption(label="1x1", value='choice_close_mode_1x1', description="1x1"),
                disnake.SelectOption(label="2x2", value='choice_close_mode_2x2', description="2x2"),
                disnake.SelectOption(label="3x3", value='choice_close_mode_3x3', description="3x3"),
                disnake.SelectOption(label="4x4", value='choice_close_mode_4x4', description="4x4"),
                disnake.SelectOption(label="5x5", value='choice_close_mode_5x5', description="5x5"),
            ],
        )

class CloseEdit(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(style = ButtonStyle.blurple, label = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", custom_id = 'edit_close', emoji = "<:manage:950741317883953182>"))
        self.add_item(disnake.ui.Button(style = ButtonStyle.green, label = "–°–æ–∑–¥–∞—Ç—å", custom_id = 'create_close', emoji = "<:close:1143172416688902196>"))

class CloseManage(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(CloseManageDropdown1())
        self.add_item(CloseManageDropdown2())
        self.add_item(disnake.ui.Button(style = ButtonStyle.blurple, label = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", custom_id = 'close_edit_prize', emoji = "<:manage:950741317883953182>"))
        self.add_item(disnake.ui.Button(style = ButtonStyle.red, label = "–û—Ç–º–µ–Ω–∞", custom_id = 'close_back'))

def hex_to_rgb(value):
    value = value.lstrip('#')
    RGB = list(tuple(int(value[i:i + len(value) // 3], 16) for i in range(0, len(value), len(value) // 3)))
    return (RGB[0]<<16) + (RGB[1]<<8) + RGB[2]

class closebot(commands.Cog):
    def __init__(self, bot: commands.Bot(intents = disnake.Intents.all(), command_prefix = 'test!')):
        self.bot = bot

    @commands.slash_command(description = '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞')
    @commands.has_any_role(1167104361067974707)
    async def close(self, inter):
        if database.count_documents({"_id": str(inter.author.id)}) == 0:
            database.insert_one({"_id": str(inter.author.id), "game": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 'mode': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'prize': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})

        game = database.find_one({'_id': str(inter.author.id)})['game']
        mode = database.find_one({'_id': str(inter.author.id)})['mode']
        prize = database.find_one({'_id': str(inter.author.id)})['prize']

        embed = disnake.Embed(color = 3092790, description = f"> **–ò–≥—Ä–∞**: {game}\n> **–†–µ–∂–∏–º**: {mode}\n> **–ù–∞–≥—Ä–∞–¥–∞**: {prize}")
        embed.set_author(name = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞ | {inter.guild.name}", icon_url = inter.guild.icon.url)
        embed.set_image(url = "")
        return await inter.send(ephemeral = True, embed = embed, view = CloseEdit())
    @close.error
    async def close_error(self, inter, error):
        if isinstance(error, commands.MissingAnyRole):
            embed = disnake.Embed(description = f'{inter.author.mention}, –£ **–í–∞—Å** –Ω–µ—Ç –Ω–∞ —ç—Ç–æ **—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è**!', color = disnake.Color.red())
            embed.set_author(name = f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–æ–∑ | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            embed.set_author(name = inter.author, icon_url = inter.author.avatar.url)
            await inter.send(embed = embed)
        else: 
            print(error)

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        custom_id = inter.component.custom_id

        if custom_id == 'reg':
            embed = disnake.Embed(color = 3092790)
            embed.set_author(name = f"Close | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)

            database.update_one({'_id': int(inter.author.id)}, {'$set': {'msg': int(inter.message.id)}}, upsert = True)
            
            embed.description = f"{inter.author.mention}, **–í—ã–±–µ—Ä–∏** –≤ –∫–∞–∫—É—é **–∫–æ–º–∞–Ω–¥—É** —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
            await inter.send(ephemeral = True, embed = embed, view = ChoiceTeam())
            
        if custom_id.startswith('tree_team'):
            await inter.response.defer()
            await update_team_info(self, inter)

        if custom_id == "list_activity":
            embed = disnake.Embed(description = "", color = 3092790)
            embed.set_author(name = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è | {inter.guild.name}", icon_url = inter.guild.icon.url)
            event_count = 0
            for event in cluster.sweetness.event_list.find():
                try:
                    start = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['start']
                    category = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['category']

                    members = 0
                    for channel in disnake.utils.get(inter.guild.categories, id = int(category)).voice_channels:
                        try:
                            members += len(channel.members)
                        except:
                            pass

                    invitelink = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['invitelink']
                    host = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['host']
                    prize = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['prize']

                    embed.description += f"### **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ**: {event['_id']}\n<:tribune:1142846971032371331> –í–µ–¥—É—â–∏–π: <@{host}>\n<:timely:1130199657482571888> –ù–∞–≥—Ä–∞–¥–∞ `{prize}`\n<:date1:1139169091840655421> –ù–∞—á–∞–ª–æ –∏–≤–µ–Ω—Ç–∞ {start}\n \
                    <:members:1142853455304720525> –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: `{members}`\n"
                    event_count += 1
                except:
                    cluster.sweetness.event_list.delete_one({'_id': str(event['_id'])})
            if event_count == 0:
                embed.description += f"# –í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –∫–ª–æ–∑—ã –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
            embed.set_footer(text = f"–°—á–µ—Ç—á–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {event_count}")
            return await inter.send(embed = embed, ephemeral = True)

        if custom_id == 'create_close':
            if cluster.sweetness.closemod.count_documents({"_id": str(inter.author.id)}) == 0:
                cluster.sweetness.closemod.insert_one({"_id": str(inter.author.id), "game": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "category": 0})
            cluster.sweetness.closemod.update_one({'_id': str(inter.author.id)}, {'$set': {'game': "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}}, upsert = True)

            game = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['game']
            
            if not game == '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
                embed = disnake.Embed(color = disnake.Color(hex_to_rgb("#ffad20")), description = f"{inter.author.mention}, **–í—ã** –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å **–µ—â—ë –æ–¥–∏–Ω –∫–ª–æ–∑**, –≤–∞–º –Ω—É–∂–Ω–æ **–∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π**!")
                embed.set_author(name = f"–ö–ª–æ–∑—ã | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.set_thumbnail(url = inter.author.display_avatar.url)
                return await inter.send(ephemeral = True, embed = embed)

            game = database.find_one({'_id': str(inter.author.id)})['game']
            cluster.sweetness.closemod.update_one({'_id': str(inter.author.id)}, {'$set': {'game': game}}, upsert = True)
            mode = database.find_one({'_id': str(inter.author.id)})['mode']
            prize = database.find_one({'_id': str(inter.author.id)})['prize']

            image = disnake.Embed(color = 3092790)
            embed = disnake.Embed(color = 3092790)
            match (game, mode):
                case ('CSGO', '5x5'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('CSGO', '1x1'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('Dota2', '5x5'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('Dota2', '1x1'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('Valorant', '5x5'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('Valorant', '1x1'):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('DotaPub', _):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('CSGOPub', _):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('ValorantPub', _):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('BrawlHalla', _):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case ('MobileLegends', _):
                    image_url = 'https://media.discordapp.net/attachments/1154165500302069760/1156216528455336006/anounce_ban.gif?ex=65142a0d&is=6512d88d&hm=2b7e154293b7949058fbe83beba856107d46a4c568b91527f8f42b7e4fad6ea8&=&width=611&height=215'
                case (_, _):
                    embed.description = f"{inter.author.mention}, **–í—ã** –Ω–µ –≤—ã–±—Ä–∞–ª–∏ **–∏–≥—Ä—É** –ª–∏–±–æ **—Ä–µ–∂–∏–º.**"
                    return await inter.send(inter.author.mention, embed = embed)

            image.set_image(url=image_url)

            embed1 = disnake.Embed(color = 3092790)
            embed1.set_thumbnail(url = inter.author.avatar.url)
            embed1.set_author(name = f"–ö–ª–æ–∑—ã | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed1.description = f'{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ **–∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–ª–æ–∑** –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{game}**!'
            await inter.send(content = inter.author.mention, embed = embed1)
            print('asfd')
            if game in ['DotaPub', 'CSGOPub', 'ValorantPub', 'BrawlHalla', 'MobileLegends']:
                MainCategory = await inter.guild.create_category(f"{game} | {inter.author.name}")
            else:
                MainCategory = await inter.guild.create_category(f"{game} {mode} | {inter.author.name}")
            edit_channel = await inter.guild.create_text_channel(name = "üíª„Éª–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", category = MainCategory)

            await edit_channel.set_permissions(inter.guild.default_role, view_channel = False)
            await edit_channel.set_permissions(inter.author, view_channel = True)

            channel_1 = await inter.guild.create_voice_channel(name = f"üî∑„Éª–õ–æ–±–±–∏", category = MainCategory)
            channel_2 = await inter.guild.create_voice_channel(name = f"üîπ„Éª–ö–æ–º–∞–Ω–¥–∞ ¬π", category = MainCategory)

            if not game in ['DotaPub', 'CSGOPub']:
                channel_3 = await inter.guild.create_voice_channel(name = f"üîπ„Éª–ö–æ–º–∞–Ω–¥–∞ ¬≤", category = MainCategory)

                await channel_2.set_permissions(inter.guild.default_role, connect = False)
                await channel_3.set_permissions(inter.guild.default_role, connect = False)
                await channel_2.set_permissions(inter.author, view_channel = True, connect = True)
                await channel_3.set_permissions(inter.author, view_channel = True, connect = True)

                await channel_2.set_permissions(inter.guild.default_role, connect = False)
                await channel_3.set_permissions(inter.guild.default_role, connect = False)
                await channel_2.set_permissions(inter.author, view_channel = True, connect = True)
                await channel_3.set_permissions(inter.author, view_channel = True, connect = True)

                await channel_1.set_permissions(inter.guild.default_role, connect = False)
                await channel_1.set_permissions(inter.author, view_channel = True, connect = True)

                await channel_1.set_permissions(disnake.utils.get(inter.guild.roles, id = int(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team1_id'])), view_channel = True, connect = True)
                await channel_1.set_permissions(disnake.utils.get(inter.guild.roles, id = int(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team2_id'])), view_channel = True, connect = True)

                await channel_2.set_permissions(disnake.utils.get(inter.guild.roles, id = int(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team1_id'])), view_channel = True, connect = True)
                await channel_3.set_permissions(disnake.utils.get(inter.guild.roles, id = int(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team2_id'])), view_channel = True, connect = True)

                await MainCategory.set_permissions(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['unverify_id']), view_channel = False) # unverify
                await MainCategory.set_permissions(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['nedo_id']), view_channel = False) # –Ω–µ –¥–æ–ø—É—Å–∫
                await MainCategory.set_permissions(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['localban_id']), view_channel = False) # local ban
                await MainCategory.set_permissions(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['closeban_id']), connect = False) # close ban

                embed2 = disnake.Embed(color = 3092790, description = f'<:ver:1110588762121048084> **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ**: 0/{int(mode[-1]) + int(mode[-1])}\n<:giftbox:1110588981025972385> **–ù–∞–≥—Ä–∞–¥–∞**: {prize} üí∞\n<:online:1109846973378470050> –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë **{int(mode[-1]) + int(mode[-1])}** –∏–≥—Ä–æ–∫–æ–≤!')
                embed2.set_author(name = f"CLOSE: {game}", icon_url = inter.guild.icon.url)
                embed2.set_image(url = 'https://i.ibb.co/rfRcJgc/bg23232.png')
                value = ""
                close_channel = await inter.guild.create_text_channel(name=f"üìß„Éª–ó–∞–ø–∏—Å—å",category = MainCategory)

                await close_channel.set_permissions(inter.guild.default_role, send_messages = False)
        
                invitelink = await close_channel.create_invite(max_uses = 99)
                invite_url = invitelink.url

                for i in range(2):
                    value += f"{i + 1}. –ü—É—Å—Ç–æ \n"
                if game == "Dota2":
                    embed2.add_field(name = "<:1pos:1153676338310418432> –ö–µ—Ä—Ä–∏", value = value, inline = False)
                    embed2.add_field(name = "<:2pos:1153676341607137411> –ú–∏–¥", value = value, inline = False)
                    embed2.add_field(name = "<:3pos:1153676343473610762> –°–ª–æ–∂–Ω–∞—è", value = value, inline = False)
                    embed2.add_field(name = "<:4pos:1153676346254430208> –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", value = value, inline = False)
                    embed2.add_field(name = "<:5pos:1153676347927965768> –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", value = value, inline = False)
                    msg = await close_channel.send(embed = embed2, view = CloseDota())
                    database.insert_one({"_id": int(msg.id), 'author': int(inter.author.id), 'carry': [], 'mid': [], 'hard': [], 'hard_support': [], "full_support": [], 'blacklist': [], 'lobby': channel_1.id})
                else:
                    embed2.add_field(name = "–ö–æ–º–∞–Ω–¥–∞ 1", value = value, inline = False)
                    embed2.add_field(name = "–ö–æ–º–∞–Ω–¥–∞ 2", value = value, inline = False)
                    msg = await close_channel.send(embed = embed2, view = CloseReg())
                    database.insert_one({"_id": int(msg.id), 'author': int(inter.author.id), 'team_one': [], 'team_two': [], 'blacklist': [], 'lobby': channel_1.id})

                embed1 = disnake.Embed(color = 3092790, description = f"Close - –ó–∞–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã –ø–æ —Ç–∏–ø—É —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ó–∞ –ø–æ–±–µ–¥—É –≤ –∫–ª–æ–∑–∞—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ –≤–∏–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ üí∞\n\n–†–µ–≥—É–ª—è—Ä–Ω–æ, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞—à–∏ <@&1120613357867778068> –ø—Ä–æ–≤–æ–¥—è—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã. –í–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!")
                embed1.set_image(url = 'https://i.ibb.co/rfRcJgc/bg23232.png')

                embed.set_footer(text = f'–í–µ–¥—É—â–∏–π: {inter.author}', icon_url = inter.author.display_avatar.url)
                embed.set_author(name = f"Close - {game} {mode}", icon_url = inter.guild.icon.url)
                embed.set_image(url = 'https://i.ibb.co/rfRcJgc/bg23232.png')

                input = datetime.datetime.now()
                data = int(input.timestamp())

                embed.description = f"```fix\nClose - –ó–∞–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã –ø–æ —Ç–∏–ø—É —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ó–∞ –ø–æ–±–µ–¥—É –≤ –∫–ª–æ–∑–∞—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ –≤–∏–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ üí∞!```"
                embed.add_field(name = f"<:tribune:1142846971032371331> –í–µ–¥—É—â–∏–π", value = f"{inter.author.mention}")
                embed.add_field(name = f"<:timely:1130199657482571888> –ù–∞–≥—Ä–∞–¥–∞", value = f"{prize} üí∞")
                embed.add_field(name = f"<:date1:1139169091840655421> –ù–∞—á–∞–ª–æ –∏–≤–µ–Ω—Ç–∞", value = f'<t:{data}:F>')
                message = await self.bot.get_channel(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['news_channel_id']).send(embeds = [image, embed], view = InviteLink(invite_url))

                database.update_one({'_id': int(inter.author.id)}, {'$set': {'msg': int(msg.id)}}, upsert = True)
                database.update_one({'_id': int(inter.author.id)}, {'$set': {'channel': int(close_channel.id)}}, upsert = True)
                database.update_one({'_id': int(inter.author.id)}, {'$set': {'prize': prize}}, upsert = True)
                database.update_one({'_id': int(inter.author.id)}, {'$set': {'channel': int(close_channel.id)}}, upsert = True)

                cluster.sweetness.event_list.insert_one({"_id": str(f"{game} {mode} #{random.randint(1, 1000)}"), 'start': f"<t:{data}:F>", 'category': int(MainCategory.id), 'invitelink': invite_url, 'host': int(inter.author.id), 'prize': prize})
                cluster.sweetness.event_report.insert_one({"_id": str(message.id), 'game': f"{game} {mode}", 'start': f"<t:{data}:F>", 'category': int(MainCategory.id), 'invitelink': invite_url, 'host': int(inter.author.id), 'prize': prize})
           
            embed = disnake.Embed(color = 3092790)
            embed.set_author(name = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–æ–∑–æ–º - {game} {mode}", icon_url = inter.guild.icon.url)
            embed.description = "‚ñ∂Ô∏è - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n‚ùå - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É\nüìå - –û–±—ä—è–≤–∏—Ç—å –æ –ø–æ–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n<:top1:1139161095265853460> - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n<:mute:942394507616485396> –ó–∞–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n<:unmute:942394404168142919> –†–∞–∑–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\nüóëÔ∏è - –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É"
            embed.set_image(url = 'https://i.ibb.co/rfRcJgc/bg23232.png')
            await edit_channel.send(inter.author.mention, embed = embed, view = ManageClose())

            channel = disnake.utils.get(inter.guild.categories, id = int(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['category_id']))
            channelxd = channel.position
            
            await MainCategory.edit(position = int(channelxd))
            cluster.sweetness.closemod.update_one({'_id': str(inter.author.id)}, {'$set': {'category': MainCategory.id}}, upsert = True)

            t = "<:snejok:1043825591494901760>"
            embed = disnake.Embed(color = 3092790, description = f"{t} –ù–∞–∑–≤–∞–Ω–∏–µ: {game}\n{t} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <#{MainCategory.id}>")
            embed.set_author(name = f"–ù–∞—á–∞–ª –∫–ª–æ–∑ - {inter.author}", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            await self.bot.get_channel(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['logs_channel_id']).send(embed = embed)

        if custom_id == "report_activity":
            id_message = str(inter.message.id)

            await inter.response.send_modal(title = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", custom_id = "report_activity", components = [
                disnake.ui.TextInput(label="–ü—Ä–∏—á–∏–Ω–∞",custom_id = "–ü—Ä–∏—á–∏–Ω–∞",style=disnake.TextInputStyle.paragraph, max_length=200)])
            
            modal_inter: disnake.ModalInteraction = await self.bot.wait_for("modal_submit",check=lambda i: i.custom_id == "report_activity" and i.author.id == inter.author.id)

            for key, value in modal_inter.text_values.items():
                reason = value

            number = randint(1, 15)

            embed = disnake.Embed(color = 3092790, description=f"{inter.author.mention}, **–ñ–∞–ª–æ–±–∞** –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ **–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞** –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º **{number}**")
            embed.set_author(name = "–ñ–∞–ª–æ–±–∞", icon_url = "https://cdn.discordapp.com/attachments/1125009710446288926/1142861099897716879/report.png")
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            await modal_inter.response.send_message(embed = embed, ephemeral = True)

            embed = disnake.Embed(description="", color = 3092790)
            event = cluster.sweetness.event_report.find_one({'_id': str(id_message)})['game']
            start = cluster.sweetness.event_report.find_one({'_id': str(id_message)})['start']

            category = cluster.sweetness.event_list.find_one({'_id': str(event['_id'])})['category']
            members = 0
            for channel in disnake.utils.get(inter.guild.categories, id = int(category)).voice_channels:
                try:
                    members += len(channel.members)
                except:
                    pass
                
            invitelink = cluster.sweetness.event_report.find_one({'_id': str(id_message)})['invitelink']
            host = cluster.sweetness.event_report.find_one({'_id': str(id_message)})['host']
            prize = cluster.sweetness.event_report.find_one({'_id': str(id_message)})['prize']

            embed.description += f"### **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ**: {event}\n<:tribune:1142846971032371331> –í–µ–¥—É—â–∏–π: <@{host}>\n<:timely:1130199657482571888> –ù–∞–≥—Ä–∞–¥–∞ `{prize}`\n<:date1:1139169091840655421> –ù–∞—á–∞–ª–æ –∏–≤–µ–Ω—Ç–∞ {start}\n \
            <:members:1142853455304720525> –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: `{members}`\n"

            embed.set_author(name = "–ñ–∞–ª–æ–±–∞", icon_url = "https://cdn.discordapp.com/attachments/1125009710446288926/1142861099897716879/report.png")
            embed.add_field(name = "> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ç—Ü–µ:", value = f"‚†Ä**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {inter.author.mention}\n‚†Ä**ID:** {inter.author.id}", inline = True)
            embed.add_field(name = "> ID –∂–∞–ª–æ–±—ã:", value = f"‚†Ä**{number}**", inline = True)
            embed.add_field(name = "> –ü—Ä–∏—á–∏–Ω–∞", value = f"```{reason}```", inline = False)
            msg = await self.bot.get_channel(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['report_channel_id']).send(content = "<@&1129862670468776025>", embed = embed, view = ReportView())
            
            database.update_one({'_id': str(msg.id)}, {'$set': {'user': inter.author.id}}, upsert = True)

        if custom_id == 'ball_report':
            await inter.response.send_modal(title=f"–û—Ç–∑—ã–≤", custom_id = "review_report", components=[
                disnake.ui.TextInput(label=f"–¢–µ–∫—Å—Ç", custom_id = f"–¢–µ–∫—Å—Ç", style=disnake.TextInputStyle.paragraph, max_length=500)])

        if custom_id[-6:] == 'report':
            if custom_id == 'accept_report':
                embed = inter.message.embeds[0]
                embed.set_footer(text=f"–ü—Ä–∏–Ω—è–ª —Ä–µ–ø–æ—Ä—Ç - {inter.author} / id - {inter.author.id}", icon_url=inter.author.display_avatar.url)
                await inter.message.edit(embed=embed, components = [])
                number = randint(1000, 9999)

                category = disnake.utils.get(inter.guild.categories, id = cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['report_category_id'])
                report_channel_text = await inter.guild.create_text_channel(name = f"üí¨„Éª–ñ–∞–ª–æ–±–∞ –∏–≤–µ–Ω—Ç—ã {number}", category = category)
                report_channel_voice = await inter.guild.create_voice_channel(name = f"üö´„Éª–ñ–∞–ª–æ–±–∞ –∏–≤–µ–Ω—Ç—ã {number}", category = category)
                await report_channel_voice.set_permissions(inter.author, connect = True, view_channel = True)

                user = disnake.utils.get(inter.guild.members, id = database.find_one({'_id': str(inter.message.id)})['user'])

                embed = disnake.Embed(color = 3092790, description=f"{user.mention}, –í–∞—à–∞ **–∂–∞–ª–æ–±–∞** –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–∞ **–ü—Ä–∏–Ω—è—Ç–∞** —Å—Ç–∞—Ä—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç—Ä–æ–º, –≤ —Å–∫–æ—Ä–æ–º **–í—Ä–µ–º–µ–Ω–∏** —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.")
                embed.set_author(name = f"Events Logs | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.set_thumbnail(url = user.display_avatar.url)
                embed.add_field(name = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value = f"> {inter.author.mention}\n> {inter.author.id}")
                embed.set_footer(text = f"–°–µ—Ä–≤–µ—Ä {inter.guild.name}", icon_url = inter.guild.icon.url)
                msg = await user.send(embed = embed)

                embed = disnake.Embed(description=f"<:11:1096126530247204966> - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {user.mention}\n<:zxc3:1009168371213926452> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤ –ø–æ–ª—å–∑—É {user.mention} \
                                      \n<:zxc2:1009168373936050206> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É {user.mention}", color = 3092790)
                embed.set_author(name = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–æ–π", icon_url = inter.guild.icon.url)
                embed.set_footer(text = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä - {inter.author} / id - {inter.author.id}", icon_url = inter.author.display_avatar.url)
                embed.set_thumbnail(url = inter.author.display_avatar.url)
                msg = await report_channel_text.send(inter.author.mention, embed = embed, view = ReportMenu())

                database.update_one({'_id': str(msg.id)}, {'$set': {'text_channel': report_channel_text.id}}, upsert = True)
                database.update_one({'_id': str(msg.id)}, {'$set': {'channel': report_channel_voice.id}}, upsert = True)
                database.update_one({'_id': str(msg.id)}, {'$set': {'user': user.id}}, upsert = True)
                
            if custom_id == 'decline_report':
                embed = inter.message.embeds[0]
                embed.set_footer(text=f"–û—Ç–∫–ª–æ–Ω–∏–ª —Ä–µ–ø–æ—Ä—Ç - {inter.author} / id - {inter.author.id}", icon_url=inter.author.display_avatar.url)
                await inter.message.edit(embed=embed, components = [])

            if custom_id == 'move_one_report':
                await inter.response.defer()
                report_channel_voice = database.find_one({'_id': str(inter.message.id)})['channel']
                user = disnake.utils.get(inter.guild.members, id = database.find_one({'_id': str(inter.message.id)})['user'])
                try:
                    await user.move_to(self.bot.get_channel(report_channel_voice))
                except:
                    embed = disnake.Embed(color = 3092790, description = f"{inter.author.mention}, **{user.mention}** –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")
                    embed.set_author(name = f"–†–µ–ø–æ—Ä—Ç—ã | {inter.guild.name}", icon_url = inter.guild.icon.url)
                    embed.set_thumbnail(url = inter.author.display_avatar.url)
                    await inter.send(embed = embed)

        if custom_id == 'accept_one':
            user = disnake.utils.get(inter.guild.members, id = database.find_one({'_id': str(inter.message.id)})['user'])
            await inter.message.edit(components = [])
            try:
                embed = disnake.Embed(color = 3092790, description=f"{user.mention}, **–†–∞–∑–±–æ—Ä** –í–∞—à–µ–π –∂–∞–ª–æ–±—ã **–±—ã–ª** –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ä—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–û—Å—Ç–∞–≤—å—Ç–µ **–æ—Ç–∑—ã–≤** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π **–∑–∞–Ω–∏–º–∞–ª—Å—è** –í–∞—à–µ–π **–∂–∞–ª–æ–±–æ–π**")
                embed.set_author(name = f"Events Logs | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.set_thumbnail(url = user.display_avatar.url)
                embed.add_field(name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", value = f"> {inter.author.mention}\n> {inter.author.id}")
                embed.set_footer(text = f"–°–µ—Ä–≤–µ—Ä {inter.guild.name}", icon_url = inter.guild.icon.url)
                msg = await user.send(embed = embed, view = BallReport())
                database.update_one({'_id': str(msg.id)}, {'$set': {'moderator': int(inter.author.id)}}, upsert = True)
            except:
                pass

            report_channel_voice = self.bot.get_channel(database.find_one({'_id': str(inter.message.id)})['channel'])
            report_channel_text = self.bot.get_channel(database.find_one({'_id': str(inter.message.id)})['text_channel'])
            await report_channel_text.delete()
            await report_channel_voice.delete()

        if custom_id == 'accept_two':
            user = disnake.utils.get(inter.guild.members, id = database.find_one({'_id': str(inter.message.id)})['user'])
            await inter.message.edit(components = [])
            try:
                embed = disnake.Embed(color = 3092790, description=f"{user.mention}, **–†–∞–∑–±–æ—Ä** –í–∞—à–µ–π –∂–∞–ª–æ–±—ã **–±—ã–ª** –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ—à–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–û—Å—Ç–∞–≤—å—Ç–µ **–æ—Ç–∑—ã–≤** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π **–∑–∞–Ω–∏–º–∞–ª—Å—è** –í–∞—à–µ–π **–∂–∞–ª–æ–±–æ–π**")
                embed.set_author(name = f"Events Logs | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.set_thumbnail(url = user.display_avatar.url)
                embed.add_field(name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", value = f"> {inter.author.mention}\n> {inter.author.id}")
                embed.set_footer(text = f"–°–µ—Ä–≤–µ—Ä {inter.guild.name}", icon_url = inter.guild.icon.url)
                msg = await user.send(embed = embed, view = BallReport())
                database.update_one({'_id': str(msg.id)}, {'$set': {'moderator': int(inter.author.id)}}, upsert = True)
            except:
                pass

            report_channel_voice = self.bot.get_channel(database.find_one({'_id': str(inter.message.id)})['channel'])
            report_channel_text = self.bot.get_channel(database.find_one({'_id': str(inter.message.id)})['text_channel'])
            await report_channel_text.delete()
            await report_channel_voice.delete()

        if custom_id == 'close_edit_prize':
            await inter.response.send_modal(title = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", custom_id = "close_edit_prize", components = [
                disnake.ui.TextInput(label="–ù–∞–≥—Ä–∞–¥–∞",placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5000",custom_id = "–ù–∞–≥—Ä–∞–¥–∞",style=disnake.TextInputStyle.short, max_length=4)])

        if custom_id == 'edit_close':
            embed = disnake.Embed(color = 3092790, description = f"{inter.author.mention}, –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
            embed.set_author(name = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞ | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            await inter.response.edit_message(embed = embed, view = CloseManage())
        if custom_id == 'close_back':
            result = cluster.sweetness.close
            game = result.find_one({'_id': str(inter.author.id)})['game']
            mode = result.find_one({'_id': str(inter.author.id)})['mode']
            prize = result.find_one({'_id': str(inter.author.id)})['prize']
            embed = disnake.Embed(color = 3092790, description = f"**–ò–≥—Ä–∞**: {game}\n**–†–µ–∂–∏–º**: {mode}\n**–ù–∞–≥—Ä–∞–¥–∞**: {prize}")
            embed.set_author(name = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞ | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_image(url = "")
            return await inter.response.edit_message(embed = embed, view = CloseEdit())
        if custom_id[-5:] == 'close':
            embed = disnake.Embed(color = 3092790)
            embed.set_author(name = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–æ–∑–æ–º", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.avatar.url)

            msg_id = database.find_one({'_id': int(inter.author.id)})['msg']
            id_channel = database.find_one({'_id': int(inter.author.id)})['channel']
            channel = self.bot.get_channel(id_channel)
            message = await channel.fetch_message(int(msg_id))

            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']

            if custom_id == 'start_close':
                embed = disnake.Embed(color = 3092790, description = f'{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –∫–ª–æ–∑!')
                embed.set_author(name = f"–ù–∞—á–∞—Ç—å –∫–ª–æ–∑ | {inter.guild.name}", icon_url = inter.guild.icon.url)

                msg = database.find_one({'_id': int(inter.author.id)})['msg']
                if game == "Dota2":
                    no_voice = []
                    await inter.response.defer()
                    for member in database.find_one({'_id': int(msg)})['carry']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                        except:
                            no_voice.append(f"<@{member}>\n")
                    for member in database.find_one({'_id': int(msg)})['mid']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                        except:
                            no_voice.append(f"<@{member}>\n")
                    for member in database.find_one({'_id': int(msg)})['hard']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                        except:
                            no_voice.append(f"<@{member}>\n")
                    for member in database.find_one({'_id': int(msg)})['hard_support']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                        except:
                            no_voice.append(f"<@{member}>\n")
                    for member in database.find_one({'_id': int(msg)})['full_support']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                        except:
                            no_voice.append(f"<@{member}>\n")
                    if not no_voice == []:
                        embed.description = f"{inter.author.mention}, –û–∂–∏–¥–∞—é –∏–≥—Ä–æ–∫–æ–≤\n{''.join(no_voice)}!"
                        await inter.send(embed = embed, ephemeral = True)

                        return await message.channel.send(f"**–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, —É –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –≤–æ–π—Å**\n{''.join(no_voice)}")

                    category_id = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category']
                    MainCategory = disnake.utils.get(inter.guild.categories, id = category_id)

                    await message.edit(view = RegDisabled())

                    password = random.randint(100, 999)
                    lobby = random.randint(0, 100)

                    carry = database.find_one({'_id': int(msg)})['carry']
                    mid = database.find_one({'_id': int(msg)})['mid']
                    hard = database.find_one({'_id': int(msg)})['hard']
                    hard_support = database.find_one({'_id': int(msg)})['hard_support']
                    full_support = database.find_one({'_id': int(msg)})['full_support']

                    random.shuffle(carry)
                    random.shuffle(mid)
                    random.shuffle(hard)
                    random.shuffle(hard_support)
                    random.shuffle(full_support)

                    embed.description = f'–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: <:verify:1080867738572050463>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏: **sweetness{lobby}**\n–ü–∞—Ä–æ–ª—å: **{password}**'
                    embed.set_author(name = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ | {game} {mode}", icon_url = inter.guild.icon.url)

                    await disnake.utils.get(inter.guild.members, id = int(carry[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))
                    await disnake.utils.get(inter.guild.members, id = int(mid[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))
                    await disnake.utils.get(inter.guild.members, id = int(hard[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))
                    await disnake.utils.get(inter.guild.members, id = int(hard_support[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))
                    await disnake.utils.get(inter.guild.members, id = int(full_support[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))

                    await disnake.utils.get(inter.guild.members, id = int(carry[1])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152630559621795931))
                    await disnake.utils.get(inter.guild.members, id = int(mid[1])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152630559621795931))
                    await disnake.utils.get(inter.guild.members, id = int(hard[1])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152630559621795931))
                    await disnake.utils.get(inter.guild.members, id = int(hard_support[1])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152630559621795931))
                    await disnake.utils.get(inter.guild.members, id = int(full_support[1])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152630559621795931))

                    embed.add_field(name = f"Team Alpha", value = f"<:1pos:1153676338310418432> <:to4kaa:947909744985800804> <@{carry[0]}>\n<:2pos:1153676341607137411> <:to4kaa:947909744985800804> <@{mid[0]}> \
                    \n<:3pos:1153676343473610762> <:to4kaa:947909744985800804> <@{hard[0]}>\n<:4pos:1153676346254430208> <:to4kaa:947909744985800804> <@{hard_support[0]}>\n<:5pos:1153676347927965768> <:to4kaa:947909744985800804> <@{full_support[0]}>")

                    embed.add_field(name = f"Team Beta", value = f"<:1pos:1153676338310418432> <:to4kaa:947909744985800804> <@{carry[1]}>\n<:2pos:1153676341607137411> <:to4kaa:947909744985800804> <@{mid[1]}> \
                    \n<:3pos:1153676343473610762> <:to4kaa:947909744985800804> <@{hard[1]}>\n<:4pos:1153676346254430208> <:to4kaa:947909744985800804> <@{hard_support[1]}>\n<:5pos:1153676347927965768> <:to4kaa:947909744985800804> <@{full_support[1]}>")
                    embed.set_footer(text = f"–í–µ–¥—É—â–∏–π: {inter.author}", icon_url = inter.author.display_avatar.url)                    
                    await message.channel.send(f"**{game} {mode} –ö–æ–º–∞–Ω–¥—ã –Ω–∞–±—Ä–∞–Ω—ã**", embed = embed)

                    embed.description = f'{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –∫–ª–æ–∑ {game}!'
                    await inter.send(embed = embed, ephemeral = True)
                else:
                    no_voice = []
                    await inter.response.defer()
                    value1 = ""
                    value2 = ""
                    for member in database.find_one({'_id': int(msg)})['team_one']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                            value1 += f"<@{member}>\n"
                        except:
                            no_voice.append(f"<@{member}>\n")
                    for member in database.find_one({'_id': int(msg)})['team_two']:
                        try:
                            member_take = disnake.utils.get(inter.guild.members, id = int(member))
                            channel_member = member_take.voice.channel.id
                            value2 += f"<@{member}>\n"
                        except:
                            no_voice.append(f"<@{member}>\n")
                    if not no_voice == []:
                        embed.description = f"{inter.author.mention}, –û–∂–∏–¥–∞—é –∏–≥—Ä–æ–∫–æ–≤\n{''.join(no_voice)}!"
                        await inter.send(embed = embed, ephemeral = True)

                        return await message.channel.send(f"**–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, —É –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –≤–æ–π—Å**\n{''.join(no_voice)}")

                    category_id = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category']
                    MainCategory = disnake.utils.get(inter.guild.categories, id = category_id)

                    await message.edit(view = RegDisabled())

                    team_one = database.find_one({'_id': int(msg)})['team_one']
                    team_two = database.find_one({'_id': int(msg)})['team_two']

                    random.shuffle(team_one)
                    random.shuffle(team_two)

                    embed.description = f'–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: <:verify:1080867738572050463>'
                    embed.set_author(name = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ | {game} {mode}", icon_url = inter.guild.icon.url)

                    await disnake.utils.get(inter.guild.members, id = int(team_one[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))
                    await disnake.utils.get(inter.guild.members, id = int(team_two[0])).add_roles(disnake.utils.get(inter.guild.roles, id = 1152629960704540784))

                    embed.add_field(name = f"Team Alpha", value = value1)
                    embed.add_field(name = f"Team Beta", value = value2)

                    embed.set_footer(text = f"–í–µ–¥—É—â–∏–π: {inter.author}", icon_url = inter.author.display_avatar.url)                    
                    await message.channel.send(f"**{game} {mode} –ö–æ–º–∞–Ω–¥—ã –Ω–∞–±—Ä–∞–Ω—ã**", embed = embed)

                    embed.description = f'{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –∫–ª–æ–∑ {game}!'
                    await inter.send(embed = embed, ephemeral = True)

            if custom_id == 'cancel_close':
                return await inter.response.send_modal(title=f"–û—Ç–º–µ–Ω–∏—Ç—å –∫–ª–æ–∑", custom_id = "cancel_close", components=[
                    disnake.ui.TextInput(label="–ü—Ä–∏—á–∏–Ω–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",custom_id = "–ü—Ä–∏—á–∏–Ω–∞", style=disnake.TextInputStyle.short, max_length=100)])
    
            if custom_id == 'member_close':
                return await inter.response.send_modal(title=f"–ê–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", custom_id = "id_delete_member", components=[
                    disnake.ui.TextInput(label="–ê–π–¥–∏", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 849353684249083914",custom_id = "–ê–π–¥–∏", style=disnake.TextInputStyle.short, max_length=25)])
    
            if custom_id == 'anonce_close':
                game = database.find_one({'_id': str(inter.author.id)})['game']
                mode = database.find_one({'_id': str(inter.author.id)})['mode']
                embed = disnake.Embed(color = 3092790)
                embed.set_author(name = f"–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∫–ª–æ–∑ | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.description = f"{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –∫–ª–æ–∑ –≤ <#{message.channel.id}>"
                await inter.send(embed = embed, ephemeral = True)
                if game == 'Rust':
                    embed = disnake.Embed(color = 3092790, description = f'–ù—É–∂–Ω—ã –µ—â—ë —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ **CLOSE –º–∞—Ç—á** –ø–æ –∏–≥—Ä–µ `RUST [UKN] {mode}`.')
                    await message.channel.send(f"CLOSE: RUST [UKN] {mode} –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ <@&1016327573866827776>", embed = embed)
                else:
                    embed = disnake.Embed(color = 3092790, description = f'–ù—É–∂–Ω—ã –µ—â—ë —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ **CLOSE –º–∞—Ç—á** –ø–æ –∏–≥—Ä–µ `{game} {mode}`.')
                    await message.channel.send(f"CLOSE: {game} {mode} –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ <@&1016327573866827776>", embed = embed)
                await asyncio.sleep(4)
                await inter.delete_original_message()

            if custom_id == 'win_close':
                game = database.find_one({'_id': str(inter.author.id)})['game']
                mode = database.find_one({'_id': str(inter.author.id)})['mode']
                embed = disnake.Embed(color = 3092790)
                embed.set_author(name = f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è | {inter.guild.name}", icon_url = inter.guild.icon.url)
                embed.description = f"{inter.author.mention}, –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏–≤—à—É—é –∫–æ–º–∞–Ω–¥—É"
                return await inter.send(embed = embed, view = WinClose())
            
        if custom_id[:3] == 'win':
            await inter.response.defer()

            if custom_id == "win_team_one":
                team = "1"
            if custom_id == "win_team_two":
                team = "2"

            cluster.sweetness.closemod.update_one({'_id': str(inter.author.id)}, {'$set': {'game': "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}}, upsert = True)
            msg_id = database.find_one({'_id': int(inter.author.id)})['msg']
            id_channel = database.find_one({'_id': int(inter.author.id)})['channel']
            channel = self.bot.get_channel(id_channel)
            message = await channel.fetch_message(int(msg_id))
            prize = database.find_one({'_id': str(inter.author.id)})['prize']
            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']

            attr_name = f"{game}"
            database_stats = getattr(database, attr_name)

            embed = disnake.Embed(color = 3092790, description = f"{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ **CLOSE –º–∞—Ç—á** –ø–æ –∏–≥—Ä–µ {game} {mode}")
            embed.set_author(name = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ CLOSE –º–∞—Ç—á", icon_url = inter.guild.icon.url)
            embed.add_field(name = "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", value = f"–ö–æ–º–∞–Ω–¥–∞ {team}")
            await inter.message.edit(embed = embed, components = [])

            embed = disnake.Embed(color = disnake.Color(hex_to_rgb("#ffad20")), description = f'–ó–∞–≤–µ—Ä—à–∏–ª—Å—è **CLOSE –º–∞—Ç—á** –ø–æ –∏–≥—Ä–µ `{game} {mode}`. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–ª–∞ **–ö–æ–º–∞–Ω–¥–∞ {team}**')
            embed.set_author(name = f"–ö–ª–æ–∑—ã {inter.guild.name}", icon_url = inter.guild.icon.url)
            value = ""
            if team == "1":
                team_win = database.find_one({'_id': int(msg_id)})['team_one']
                team_losers = database.find_one({'_id': int(msg_id)})['team_two']
            else:
                team_win = database.find_one({'_id': int(msg_id)})['team_two']
                team_losers = database.find_one({'_id': int(msg_id)})['team_one']
            for i in range(int(mode[-1])):
                if i < len(team_win):
                    database.users.update_one({"id": str(team_win[i])},{"$inc": {"balance": +int(prize)}})
                    if database_stats.count_documents({"_id": str(team_win[i])}) == 0:
                        database_stats.insert_one({"_id": str(team_win[i]), "wins": 0, "loses": 0})
                    database_stats.update_one({"_id": str(team_win[i])},{"$inc": {"wins": +1}})
                    wins = database_stats.find_one({'_id': str(team_win[i])})['wins']
                    loses = database_stats.find_one({'_id': str(team_win[i])})['loses']
                    total_games = wins + loses
                    try:
                        winrate = (wins / total_games) * 100
                    except:
                        winrate = 0
                    embed1 = disnake.Embed(description = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å **–ø–æ–±–µ–¥–æ–π!** –ù–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ **{prize}** üí∞ –±—ã–ª–∞ **—Ä–∞–∑–¥–µ–ª–µ–Ω–∞** –º–µ–∂–¥—É **–ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏**\n\n**–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º close-–º–∞—Ç—á–µ!**", color = 3092790)
                    embed1.set_author(name = f"–ö–ª–æ–∑—ã {inter.guild.name}", icon_url = inter.guild.icon.url)
                    await disnake.utils.get(inter.guild.members, id = int(team_win[i])).send(embed = embed1)
                    winrate = f"{winrate:.2f}".rstrip("0").rstrip(".")
                    value += f"{i + 1}. <@{int(team_win[i])}> **–í–∏–Ω—Ä–µ–π—Ç**: <:winrate:1110588767124869130> {winrate}% > **–í—Å–µ–≥–æ –∏–≥—Ä {game} {mode}**: <:battle:1110588765128380486> {total_games}\n"
                else:
                    value += f"{i + 1}. –ü—É—Å—Ç–æ\n"

            for i in range(int(mode[-1])):
                if i < len(team_losers):
                    embed1 = disnake.Embed(description = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é **–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏**. **–ë—É–¥–µ–º –∂–¥–∞—Ç—å** –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º **close-–º–∞—Ç—á–µ**.", color = 3092790)
                    embed1.set_author(name = f"–ö–ª–æ–∑—ã {inter.guild.name}", icon_url = inter.guild.icon.url)
                    await disnake.utils.get(inter.guild.members, id = int(team_losers[i])).send(embed = embed1)
                    if database_stats.count_documents({"_id": str(team_losers[i])}) == 0:
                        database_stats.insert_one({"_id": str(team_losers[i]), "wins": 0, "loses": 0})
                    database_stats.update_one({"_id": str(team_losers[i])}, {"$inc": {"loses": +1}})
            try:
                try:
                    for member in database.find_one({'_id': int(msg_id)})['team_one']:
                        await disnake.utils.get(inter.guild.members, id = int(member)).remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team1_id']))
                    for member in database.find_one({'_id': int(msg_id)})['team_two']:
                        await disnake.utils.get(inter.guild.members, id = int(member)).remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team2_id']))
                except:
                    pass

                category_id = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category']
                category = disnake.utils.get(inter.guild.categories, id = category_id)
                for channel in category.voice_channels:
                    for member in channel.members:
                        await member.move_to(self.bot.get_channel(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['first_mod_channel_id']))
                    await channel.delete()
                for channel in category.text_channels:
                    await channel.delete()
                await self.bot.get_channel(int(cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category'])).delete()
            except:
                pass

            embed.add_field(name = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:", value = f"{value}\n–ü—Ä–∏–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ –≤–∏–¥–µ **{prize}** üí∞ –±—ã–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏!", inline = False)
            await self.bot.get_channel(1167104883258822726).send(embed = embed)

    @commands.Cog.listener()
    async def on_modal_submit(self, inter):
        custom_id = inter.custom_id
        if custom_id == "ProfileSteamDOTA":
            for key, value in inter.text_values.items():
                id = value

            embed = disnake.Embed(color = 3092790, timestamp = datetime.datetime.utcnow())
            embed.set_author(name = f"–ü—Ä–∏–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞", icon_url = inter.guild.icon.url)
            embed.set_footer(text = f"–ó–∞–ø—Ä–æ—Å–∏–ª(–∞) {inter.author} | ID: {id}", icon_url = inter.author.display_avatar.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            embed.set_footer(text = "–û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π Steam –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.", icon_url = "https://cdn.discordapp.com/emojis/1074903723106635809.gif?size=96&quality=lossless")
            url = f"https://stratz.com/players/{id}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = requests.get(url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ HTML-–∫–æ–¥–∞
                soup = BeautifulSoup(response.text, "html.parser")

                # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç <image>
                image_element = soup.find("image")

                # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ href
                if image_element:
                    img_url = image_element.get("href")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ img_url
                    number_match = re.search(r"medal_(\d+)\.png", img_url)

                    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π number
                    if number_match:
                        medal_number  = number_match.group(1)
                        match int(medal_number):
                            case 1:
                                rating = "0-610"
                            case 2:
                                rating = "770-1400"
                            case 3:
                                rating = "1540-2150"
                            case 4:
                                rating = "2310-2930"
                            case 5:
                                rating = "3080-3700"
                            case 6:
                                rating = "3850-4460"
                            case 7:
                                rating = "4620-5420"
                            case 8:
                                rating = "–í—ã—à–µ 5420"
                            case _:
                                rating = "–ù–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"

                        target_element = soup.find("span", class_="hitagi__sc-41hgfb-1 hHdoEl")
                        if target_element:
                            name = target_element.get_text()
                        else:
                            embed.description = f'* {inter.author.mention}, –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫–Ω–µ–π–º'
                            return await inter.send(embed = embed)
                        cluster.sweetness.steam.update_one({'_id': str(inter.author.id)}, {'$set': {'name': name}}, upsert = True)
                        cluster.sweetness.steam.update_one({'_id': str(inter.author.id)}, {'$set': {'mmr': rating}}, upsert = True)
                        embed.description = f'* {inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç **{name}**!\n –î–∏–∞–ø–∞–∑–æ–Ω –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: **{rating}**'
                        await inter.send(embed = embed, ephemeral = True)
                    
                        msg = database.find_one({'_id': int(inter.author.id)})['msg']
                        id_channel = inter.channel.id
                        channel = self.bot.get_channel(id_channel)
                        msg_id = await channel.fetch_message(msg)
                        msg_id_data = database.find_one({'_id': int(msg_id.id)})
                        blacklist = msg_id_data['blacklist']
                        id = msg_id_data['author']
                        lobby_id = msg_id_data['lobby']
                        team_one = msg_id_data['team_one']
                        team_two = msg_id_data['team_two']

                        lobby = self.bot.get_channel(lobby_id)
                        ved = disnake.utils.get(inter.guild.members, id=int(id))
                        game = database.find_one({'_id': str(ved.id)}, {'game': 1})['game']
                        mode = database.find_one({'_id': str(ved.id)}, {'mode': 1})['mode']
                        prize = database.find_one({'_id': str(ved.id)}, {'prize': 1})['prize']

                        if inter.author.id in blacklist:
                            embed = disnake.Embed(description=f"{inter.author.mention}, **–í—ã** –±—ã–ª–∏ **–∏—Å–∫–ª—é—á–µ–Ω—ã** –≤–µ–¥—É—â–∏–º –∏ —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ **–ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ** –≤ —ç—Ç–æ–º –∫–ª–æ–∑–µ.", color=disnake.Color(hex_to_rgb("#5a66ea")))
                            embed.set_author(name = f"–ó–∞–ø–∏—Å—å –Ω–∞ –∫–ª–æ–∑ {game}", icon_url = inter.guild.icon.url)
                            embed.set_thumbnail(url = inter.author.display_avatar.url)
                            await inter.response.edit_message(embed=embed, components=[])

                        attr_name = f"{game}"
                        database_stats = getattr(database, attr_name)

                        msg_id_data = database.find_one({'_id': int(msg_id.id)})
                        team_one = msg_id_data['team_one']
                        team_two = msg_id_data['team_two']
                        need = int(mode[-1]) * 2
                        all_players = len(team_one) + len(team_two)

                        embed = disnake.Embed(color=disnake.Color(hex_to_rgb("#5a66ea")), description=f'<:ver:1110588762121048084> **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ**: {all_players}/{need}\n<:giftbox:1110588981025972385> **–ù–∞–≥—Ä–∞–¥–∞**: {prize} üí∞\n<:online:1109846973378470050> –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë **{need - all_players}** –∏–≥—Ä–æ–∫–æ–≤!')
                        embed.set_author(name = f"CLOSE: {game} | {inter.guild.name}", icon_url = inter.guild.icon.url)
                        embed.set_image(url = "")

                        value = ""
                        for i in range(int(mode[-1])):
                            if i < len(team_one):
                                team_member_id = team_one[i]
                                stats = database_stats.find_one({'_id': str(team_member_id)}, {'wins': 1, 'loses': 1})
                                wins = stats['wins']
                                loses = stats['loses']
                                total_games = wins + loses
                                winrate = (wins / total_games) * 100 if total_games != 0 else 0
                                winrate = f"{winrate:.2f}".rstrip("0").rstrip(".")
                                value += f"{i + 1}. <@{int(team_one[i])}> **–í–∏–Ω—Ä–µ–π—Ç**: <:winrate:1110588767124869130> {winrate}% > **–í—Å–µ–≥–æ –∏–≥—Ä {game} {mode}**: <:battle:1110588765128380486> {total_games}\n"
                            else:
                                value += f"{i + 1}. –ü—É—Å—Ç–æ\n"
                        embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 1", value=value, inline=False)

                        value = ""
                        for i in range(int(mode[-1])):
                            if i < len(team_two):
                                team_member_id = team_two[i]
                                database_stats.update_one({'_id': str(team_member_id)}, {'$set': {'loses': 0}}, upsert=True)
                                database_stats.update_one({'_id': str(team_member_id)}, {'$set': {'wins': 0}}, upsert=True)
                                stats = database_stats.find_one({'_id': str(team_member_id)}, {'wins': 1, 'loses': 1})
                                wins = stats['wins']
                                loses = stats['loses']
                                total_games = wins + loses
                                winrate = (wins / total_games) * 100 if total_games != 0 else 0
                                winrate = f"{winrate:.2f}".rstrip("0").rstrip(".")
                                value += f"{i + 1}. <@{int(team_two[i])}> **–í–∏–Ω—Ä–µ–π—Ç**: <:winrate:1110588767124869130> {winrate}% > **–í—Å–µ–≥–æ –∏–≥—Ä {game} {mode}**: <:battle:1110588765128380486> {total_games}\n"
                            else:
                                value += f"{i + 1}. –ü—É—Å—Ç–æ\n"
                        embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 2", value=value, inline=False)
                        await msg_id.edit(embed=embed)
                    else:
                        embed.description = f'* {inter.author.mention}, –ù–µ —É–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ –º–º—Ä'
                        return await inter.send(embed = embed)
                else:
                    embed.description = f'* {inter.author.mention}, –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–º—Ä'
                    return await inter.send(embed = embed)
            else:
                embed.description = f'* {inter.author.mention}, –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫–∫–∞—É–Ω—Ç'
                return await inter.send(embed = embed)


        if custom_id == 'cancel_close':

            for key, value in inter.text_values.items():
                reason = value

            await inter.response.defer()

            msg = database.find_one({'_id': int(inter.author.id)})['msg']
            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']
            try:
                for member in database.find_one({'_id': int(msg)})['team_one']:
                    embed = disnake.Embed(description = f"CLOSE –º–∞—Ç—á –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: `{reason}`", color = disnake.Color(hex_to_rgb("#ffad20")))
                    await disnake.utils.get(inter.guild.members, id = int(member)).send(f"CLOSE: {game} {mode} –º–∞—Ç—á –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", embed = embed)
                for member in database.find_one({'_id': int(msg)})['team_two']:
                    embed = disnake.Embed(description = f"CLOSE –º–∞—Ç—á –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: `{reason}`", color = disnake.Color(hex_to_rgb("#ffad20")))
                    await disnake.utils.get(inter.guild.members, id = int(member)).send(f"CLOSE: {game} {mode} –º–∞—Ç—á –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", embed = embed)
            except:
                pass
            name = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['game']
            cluster.sweetness.closemod.update_one({'_id': str(inter.author.id)}, {'$set': {'game': "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}}, upsert = True)
            try:
                for member in database.find_one({'_id': int(msg)})['team_one']:
                    await disnake.utils.get(inter.guild.members, id = int(member)).remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team1_id']))
                for member in database.find_one({'_id': int(msg)})['team_two']:
                    await disnake.utils.get(inter.guild.members, id = int(member)).remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team2_id']))
            except:
                pass
            try:
                category_id = cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category']
                category = disnake.utils.get(inter.guild.categories, id = category_id)
                for channel in category.voice_channels:
                    for member in channel.members:
                        await member.move_to(self.bot.get_channel(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['first_mod_channel_id']))
                    await channel.delete()
                for channel in category.text_channels:
                    await channel.delete()
                await self.bot.get_channel(int(cluster.sweetness.closemod.find_one({'_id': str(inter.author.id)})['category'])).delete()
            except:
                pass

        if custom_id == 'close_edit_prize':
            for key, value in inter.text_values.items():
                target = value
            database.update_one({'_id': str(inter.author.id)}, {'$set': {'prize': int(target)}}, upsert = True)
            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']
            prize = database.find_one({'_id': str(inter.author.id)})['prize']
            embed = disnake.Embed(color = 3092790, description = f"**–ò–≥—Ä–∞**: {game}\n**–†–µ–∂–∏–º**: {mode}\n**–ù–∞–≥—Ä–∞–¥–∞**: {prize}")
            embed.set_author(name = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞| {inter.guild.name}", icon_url = inter.guild.icon.url)
            await inter.response.edit_message(embed = embed, view = CloseEdit())

        if custom_id == 'id_delete_member':
            for key, value in inter.text_values.items():
                target = value
            member = disnake.utils.get(inter.guild.members, id = int(target))
            try:
                if member.voice and member.voice.channel:
                    await member.move_to(None)
            except:
                pass
            msg = database.find_one({'_id': int(inter.author.id)})['msg']
            try:
                await member.remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team1_id']))
                await member.remove_roles(inter.guild.get_role(cluster.sweetness.system.find_one({'_id': str(inter.guild.id)})['team2_id']))
            except:
                pass
            id_channel = database.find_one({'_id': int(inter.author.id)})['channel']
            channel = self.bot.get_channel(id_channel)
            msg_id = await channel.fetch_message(int(msg))
            team_one = database.find_one({'_id': int(msg_id.id)})['team_one']
            team_two = database.find_one({'_id': int(msg_id.id)})['team_two']

            database.update_one({'_id': int(msg_id.id)}, {'$push': {'blacklist': int(target)}}, upsert = True)

            if int(target) in team_one:
                database.update_one({'_id': int(msg_id.id)}, {'$pull': {'team_one': int(target)}}, upsert = True)
            elif int(target) in team_two:
                database.update_one({'_id': int(msg_id.id)}, {'$pull': {'team_two': int(target)}}, upsert = True)
            team_one = database.find_one({'_id': int(msg_id.id)})['team_one']
            team_two = database.find_one({'_id': int(msg_id.id)})['team_two']

            embed = disnake.Embed(description = f"{inter.author.mention}, **–í—ã** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ <@{target}> –∏–∑ –∑–∞–ø–∏—Å–∏", color = 3092790)
            embed.set_author(name = f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url = inter.author.display_avatar.url)
            await inter.send(embed = embed, ephemeral = True)

            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']
            prize = database.find_one({'_id': str(inter.author.id)})['prize']
            need = int(mode[-1]) + int(mode[-1])
            all_players = len(team_one) + len(team_two)
            embed = disnake.Embed(color = 3092790, description = f'<:ver:1110588762121048084> **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ**: {all_players}/{need}\n<:giftbox:1110588981025972385> **–ù–∞–≥—Ä–∞–¥–∞**: {prize} üí∞\n<:online:1109846973378470050> –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë **{need - all_players}** –∏–≥—Ä–æ–∫–æ–≤!')
            embed.set_author(name = f"CLOSE: {game} | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_image(url = 'https://i.ibb.co/rfRcJgc/bg23232.png')
            value = ""
            for i in range(int(mode[-1])):
                if i < len(team_one):
                    value += f"{i + 1}. <@{int(team_one[i])}> **–í–∏–Ω—Ä–µ–π—Ç**: <:winrate:1110588767124869130> 0% > **–í—Å–µ–≥–æ –∏–≥—Ä {game} {mode}**: <:battle:1110588765128380486> 0\n"
                else:
                    value += f"{i + 1}. –ü—É—Å—Ç–æ\n"
            embed.add_field(name = "–ö–æ–º–∞–Ω–¥–∞ 1", value = value, inline = False)
            value = ""
            for i in range(int(mode[-1])):
                if i < len(team_two):
                    value += f"{i + 1}. <@{int(team_two[i])}> **–í–∏–Ω—Ä–µ–π—Ç**: <:winrate:1110588767124869130> 0% > **–í—Å–µ–≥–æ –∏–≥—Ä {game} {mode}**: <:battle:1110588765128380486> 0\n"
                else:
                    value += f"{i + 1}. –ü—É—Å—Ç–æ\n"
            embed.add_field(name = "–ö–æ–º–∞–Ω–¥–∞ 2", value = value, inline = False)
            await msg_id.edit(embed = embed)
            await asyncio.sleep(7)
            await inter.delete_original_message()

    @commands.Cog.listener()
    async def on_dropdown(self, inter):
        custom_id = inter.values[0]
        if custom_id[:12] == 'choice_close':
            if custom_id[:17] == 'choice_close_mode':
                database.update_one({'_id': str(inter.author.id)}, {'$set': {'mode': custom_id[-3:]}}, upsert = True)
            else:
                database.update_one({'_id': str(inter.author.id)}, {'$set': {'game': custom_id[13:]}}, upsert = True)
            game = database.find_one({'_id': str(inter.author.id)})['game']
            mode = database.find_one({'_id': str(inter.author.id)})['mode']
            prize = database.find_one({'_id': str(inter.author.id)})['prize']
            embed = disnake.Embed(color = 3092790, description = f"**–ò–≥—Ä–∞**: {game}\n**–†–µ–∂–∏–º**: {mode}\n**–ù–∞–≥—Ä–∞–¥–∞**: {prize}")
            embed.set_author(name = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–æ–∑–∞ | {inter.guild.name}", icon_url = inter.guild.icon.url)
            embed.set_image(url = "")
            await inter.response.edit_message(embed = embed, view = CloseEdit())
        
def setup(bot): 
    bot.add_cog(closebot(bot))